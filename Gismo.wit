# This Hello.wit file will work for a standalone build in this directory
#
# When used with CMake the Hello.wit.in file is used as a template and
# appropriate path modifications are made

module_name         = "Gismo"
uuid                = "76931fac-9dab-2b36-c248-b87d6ae33f9a"

lib_basename        = "$(@__DIR__)/../deps/libjlGismo"

# List of input header files containing the classes to wrap
# See also include_dirs
input               = [
"../../gismo/src/gsCore/gsForwardDeclarations.h",
"../../gismo/src/gsCore/gsLinearAlgebra.h",
"../../gismo/src/gsIO/gsFileData.h",
"../../gismo/src/gsIO/gsReadFile.h",
#"../../gismo/src/gsCore/gsFunctionSet.h",

"../../gismo/src/gsCore/gsSysInfo.h",
#  "../../gismo/src/gsCore/gsMultiPatch.h",
#  "../../gismo/src/gsUtils/gsPointGrid.h",


#  "../../gismo/src/gsCore/gsFunction.h",
#  "../../gismo/src/gsCore/gsGeometry.h",
]

extra_header = [
"../../gismo/src/gsIO/gsFileData.h",
"../../gismo/src/gsIO/gsFileData.hpp",

]
# List of directories, where header files must be look for
include_dirs        = [
  "../../gismo/build",
  "../../gismo/external",
  "../../gismo/src",
  "../../gismo/src/gsNurbs",
  "../../gismo/src/gsCore"
]

veto_list = "vetoed_list.txt"
#export = "all"
# C++ standard to be used to interpret the header files
# See clang -std= option
# Possible values: "c++11", "c++14", "c++17", and "c++20"
cxx-std             = "c++17"

# Number of class wrapper to group in the same source file
# -1: one steering file, one file for class wrappers, one file
#     for global functions and variables
# 0: all code in a single file
# 1: one file per class (default)
# n, n > 1: n classed per file.
n_classes_per_file = 0

# Version of CxxWrap the code must be generated for.
# Pay attention to quote the string. E.g, "0.14"
# If empty, assume latest supported one.
cxxwrap_version     = "0.16.2"


# Root directory for the output file. Path of all
# output with be prefix with this value a /-sign.
#output-prefix = "wrapit/"

# Destination directory for the generated c++ code
# If not set, default to: lib<module_name>/src
#out_cxx_dir =  "wrapit/cxx"

# Destination directory for the generated julia package
# If not set, default to: <module_name>. The julia module code
# is written in a src subdirectory (or the subdirectory defined
# in out_jl_subdir) and Project.toml file
# at the root of the directory.
#out_jl_dir = "wrapit/jl"

# Directory to put the module julia code files relative to out_jl_dir
# Use empty string to get the files at the root of out_jl_dir.
#out_jl_subdir = "src"

# Discard methods with no wrapper for one type of its argument type
# or return value
#auto_veto = true


