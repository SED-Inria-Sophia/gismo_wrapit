# Name of the julia module to generate
module_name         = "GismoLib"

# List of input header files containing the classes to wrap
# See also include_dirs
input               = [ "gismo.h", "gsKnotVector.h" ]

# List of directories, where header files must be look for
include_dirs        = [ "gismo/build", "gismo/external", "gismo/src", "gismo/src/gsNurbs", "gismo/src/gsCore" ]

# C++ standard to be used to interpret the header files
# See clang -std= option
# Possible values: "c++11", "c++14", "c++17", and "c++20"
cxx-std             = "c++17"

# Version of CxxWrap the code must be generated for.
# Pay attention to quote the string. E.g, "0.14"
# If empty, assume latest supported one.
cxxwrap_version     = ""


uuid = "0c838fb3-89e0-85c8-d063-cd88e38d2909"


# Root directory for the output file. Path of all
# output with be prefix with this value a /-sign.
output-prefix = "wrapit/"

# Destination directory for the generated c++ code
# If not set, default to: lib<module_name>/src
out_cxx_dir =  "wrapit/cxx"

# Destination directory for the generated julia package
# If not set, default to: <module_name>. The julia module code
# is written in a src subdirectory (or the subdirectory defined
# in out_jl_subdir) and Project.toml file
# at the root of the directory.
out_jl_dir = "wrapit/jl"

# Directory to put the module julia code files relative to out_jl_dir
# Use empty string to get the files at the root of out_jl_dir.
out_jl_subdir = "src"

# Number of class wrapper to group in the same source file
# -1: one steering file, one file for class wrappers, one file 
#     for global functions and variables
# 0: all code in a single file
# 1: one file per class (default)
# n, n > 1: n classed per file.
n_classes_per_file = 1

